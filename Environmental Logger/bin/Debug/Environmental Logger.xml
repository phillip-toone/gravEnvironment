<?xml version="1.0"?>
<doc>
<assembly>
<name>
Environmental Logger
</name>
</assembly>
<members>
<member name="T:Environmental_Logger.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Environmental_Logger.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Environmental_Logger.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="M:Environmental_Logger.FileIO.WriteTextFile(System.String,System.String@,System.Boolean,System.Boolean)">
 <summary>
 Writes a string to a text file with the extension .txt
 </summary>
 <param name="filepath">The fully qualified file path.</param>
 <param name="text">The text string to write.</param>
 <param name="overWrite">Overwrite the file with the new string if the file exists.</param>
 <param name="Append">Append the new string to the existing file.</param>
 <returns>Returns True of False depending on successful completion of the task</returns>
 <remarks></remarks>
</member>
<member name="M:Environmental_Logger.FileIO.ReadTextFile(System.String)">
 <summary>
 Reads and returns the content of a file on disk
 </summary>
 <param name="path">The fully qualified path name of the file</param>
 <returns>The text in the file.  If the file does not exist, it returns nothing</returns>
 <remarks></remarks>
</member>
<member name="M:Environmental_Logger.FileIO.GetFileName(System.Boolean,System.String,System.String)">
 <summary>
 Either returns the fully qualified file name of an existing or a new file
 </summary>
 <param name="mustExist">If the file MustExist, it only returns the name of an existing file.  If not, then it only returns the name of a new file.</param>
 <param name="extension">Optional extension for the file</param>
 <returns>Fully qualified file path.</returns>
 <remarks></remarks>
</member>
<member name="M:Environmental_Logger.FileIO.GetDataTitles(System.String)">
 <summary>
 This function returns the names for the input file that contain the qualifier passed to the function
 </summary>
 <param name="filepath">The full file path to the data file</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Environmental_Logger.FileIO.GetDataBlock(System.String,System.String)">
 <summary>
 This function returns the entire block of data from one qualifer to the next qualifer.
 It also returns the datablock name following the qualifer.
 </summary>
 <param name="dataName">Method data qualifer text</param>
 <param name="filepath">Full file path to the file</param>
 <returns>Associated data, includeing the method name, in a collection</returns>
 <remarks></remarks>
</member>
<member name="M:Environmental_Logger.FileIO.DeleteDataBlock(System.String,System.String)">
 <summary>
 Deletes the block of data specifed from the data file
 </summary>
 <param name="dataName">Title fo the block to delete</param>
 <param name="filepath">Full file path</param>
 <remarks></remarks>
</member>
<member name="M:Environmental_Logger.FileIO.WriteDataBlock(System.String[]@,System.String)">
 <summary>
 Writes the data passed to data block file.   This sub appends CrLf to the end of each line
 </summary>
 <param name="data">Data as a string array</param>
 <param name="filepath">Full file path</param>
 <remarks></remarks>
</member>
<member name="M:Environmental_Logger.GeneralCode.CreateDataFileFolders(System.String@)">
 <summary>
 If the application data folder does not exist it creates it and copies all files in the application startup path with the extension of '.kem' to the data folder.
 </summary>
 <remarks></remarks>
</member>
<member name="M:Environmental_Logger.GeneralCode.SearchCommPorts(System.String,System.String,System.String,System.Int32)">
 <summary>
 Tests all unopened comm ports to identify the port of interest.
 </summary>
 <param name="testCommand">Command to seen to the instrument, including all terminating charactors.</param>
 <param name="expectedReply">Expected reply.</param>
  <param name="terminatingCharactor">Terminating charactor for the reply.</param>
 <returns>Comm port name.</returns>
 <remarks></remarks>
</member>
<member name="M:Environmental_Logger.GeneralCode.GetFileTimeString">
 <summary>
 Returns a string used in filenames, like '10_12_17 at 12:56:23'
 </summary>
 <returns>File time string.</returns>
 <remarks></remarks>
</member>
<member name="M:Environmental_Logger.GeneralCode.EnforceLimits(System.Int32,System.Int32,System.Int32)">
 <summary>
 Returns a value within the limits of min and max.
 </summary>
 <param name="input">The number to operate on</param>
 <param name="min">The minimum allowed value</param>
 <param name="max">The maximum allowed value</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Environmental_Logger.GeneralCode.EnforceLimits(System.Double,System.Double,System.Double)">
 <summary>
 Returns a value within the limits of min and max.
 </summary>
 <param name="input">The number to operate on</param>
 <param name="min">The minimum allowed value</param>
 <param name="max">The maximum allowed value</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Environmental_Logger.GeneralCode.ExtractNumberFromString(System.String@)">
 <summary>
 Extracts the first numeric value it finds in a string including decimal point and decimals
 </summary>
 <param name="myString">String to extact the number from</param>
 <returns>The extracted number as a string</returns>
 <remarks></remarks>
</member>
<member name="M:Environmental_Logger.GeneralCode.ClearBit(System.Int32,System.Int32)">
 <summary>
 Clears the specifed bit in the value passed.
 </summary>
 <param name="data">Value to operate on.</param>
 <param name="bit">Bit to clear.  Zero based.</param>
 <returns>Process data value.</returns>
 <remarks></remarks>
</member>
<member name="M:Environmental_Logger.GeneralCode.ExamineBit(System.Int32,System.Int32)">
 <summary>
 Examines the specified bit of an integer number
 </summary>
 <param name="data">Integer to examine</param>
 <param name="bit">0 based bit to examine</param>
 <returns>True if bit is 1, False if 0</returns>
 <remarks></remarks>
</member>
<member name="M:Environmental_Logger.GeneralCode.SetBit(System.Int32,System.Int32)">
 <summary>
 Sets the specifed bit to 1.
 </summary>
 <param name="data">Data item to operate on.</param>
 <param name="bit">Bit position to set.  Zero based.</param>
 <returns>The modified data item.</returns>
 <remarks></remarks>
</member>
<member name="M:Environmental_Logger.GeneralCode.ToggleBit(System.Int32,System.Int32)">
 <summary>
 Toggles the state of the specifed bit in the value passed to the function.
 </summary>
 <param name="data">Data item to operate on.</param>
 <param name="bit">Bit to toggle.  Zero based.</param>
 <returns>The modifed data item.</returns>
 <remarks></remarks>
</member>
<member name="M:Environmental_Logger.GeneralCode.GetAcsiiCode(System.Int32,System.Boolean)">
 <summary>
 Returns the ACSII code for the keyboard key pressed.  Implemented for text keys, number keys, symbol keys.
 </summary>
 <param name="keyValue">e.keyvalue of the key pressed.</param>
 <param name="shiftSet">State of the ShiftKey.  Does not check for Cap Lock</param>
 <returns>Ascii value of the key.   0 if the key is not defined.</returns>
 <remarks></remarks>
</member>
</members>
</doc>
